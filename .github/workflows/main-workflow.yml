name: Deploy Pipeline

on:
  push:
    branches:
      - main

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      owner_lc: ${{ steps.set-owner-lc.outputs.owner_lc }} 
      repo_url: ${{ github.repository }}
    steps:
      - name: Set lower case owner name
        id: set-owner-lc
        run: echo "owner_lc=${OWNER,,}" >> "$GITHUB_OUTPUT"
        env:
          OWNER: ${{ github.repository_owner }}
      - name: Set repository URL
        id: set-repo-url
        run: echo "REPO_URL=${{ github.repository }}" >> $GITHUB_ENV          
  debops-test:
    runs-on: ubuntu-latest
    env:
      ANSIBLE_USER_SSH_PUBLIC_KEY: ${{ secrets.ANSIBLE_USER_SSH_PUBLIC_KEY }}
      ANSIBLE_CONFIG: ./ansible.cfg
      PATH: /home/runner/.local/bin:$PATH

    steps:
      - name: Check if running inside a container
        run: |
          if [ -f /.dockerenv ]; then
            echo "Running inside a Docker container!"
          else
            echo "Running on a full VM."
          fi    
      - name: Debug OS
        run: |
          echo "OS Information:"
          uname -a
          cat /etc/os-release || true
          echo "Available package managers:"
          which apt || echo "apt not found"
          which apt-get || echo "apt-get not found"
          which dnf || echo "dnf not found"
          which yum || echo "yum not found"
          which apk || echo "apk not found"          
      - name: Install System Dependencies
        run: |
          apt update -y 
          apt install -y sudo
          sudo apt-get update -y
          sudo apt-get install -y openssh-client git \
            python3-future python3-ldap python3-netaddr \
            python3-dnspython python3-passlib python3-toml \
            build-essential python3-dev libffi-dev libssl-dev \
            libsasl2-dev libldap2-dev python3-pip tar          
  # build-cdk:
  #   uses: ./.github/workflows/build-cdk.yml
  #   needs: set-env
  #   with:
  #     owner_lc: ${{ needs.set-env.outputs.owner_lc }}    
  #     repo_url: ${{ needs.set-env.outputs.repo_url }}
  #   secrets: inherit      
  
  # build-inventory:
  #   uses: ./.github/workflows/build-inventory.yml    
  #   needs: set-env
  #   with:
  #     owner_lc: ${{ needs.set-env.outputs.owner_lc }}     
  #     repo_url: ${{ needs.set-env.outputs.repo_url }}
  #   secrets: inherit       

  # build-debops:
  #   uses: ./.github/workflows/build-debops.yml
  #   needs: set-env
  #   with:
  #     owner_lc: ${{ needs.set-env.outputs.owner_lc }}     
  #     repo_url: ${{ needs.set-env.outputs.repo_url }}
  #   secrets: inherit

  # deploy-cdk:
  #   uses: ./.github/workflows/deploy-cdk.yml
  #   needs: set-env
  #   with:
  #     owner_lc: ${{ needs.set-env.outputs.owner_lc }}     
  #   secrets: inherit      

  # terraform:
  #   uses: ./.github/workflows/terraform.yml
  #   needs: deploy-cdk
  #   secrets: inherit

  generate-inventory:
    uses: ./.github/workflows/generate-inventory.yml
    needs: [set-env]
    with:
      owner_lc: ${{ needs.set-env.outputs.owner_lc }}      
    secrets: inherit            

  run-debops:
    uses: ./.github/workflows/run-debops.yml
    needs: [generate-inventory,set-env]
    with:
      owner_lc: ${{ needs.set-env.outputs.owner_lc }}    
    secrets: inherit  
